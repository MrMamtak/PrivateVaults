package vault.mamtak.privateVaults;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public final class PrivateVaults extends JavaPlugin implements Listener {

    private final Map<Inventory, UUID> openVaultOwners = new HashMap<>();
    private final Map<Inventory, Integer> openVaultNumbers = new HashMap<>();
    private File vaultsFolder;

    @Override
    public void onEnable() {
        saveDefaultConfig();
        vaultsFolder = new File(getDataFolder(), "vaults");
        if (!vaultsFolder.exists()) vaultsFolder.mkdirs();
        getServer().getPluginManager().registerEvents(this, this);
    }

    @Override
    public void onDisable() {
        for (Inventory inv : openVaultOwners.keySet()) {
            saveVault(inv);
        }
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (args.length == 1 && args[0].equalsIgnoreCase("reload")) {
            if (!(sender instanceof Player) || ((Player) sender).isOp()) {
                reloadConfig();
                sender.sendMessage(ChatColor.GREEN + "PrivateVaults config reloaded.");
            } else {
                sender.sendMessage(ChatColor.RED + "Only operators can do that.");
            }
            return true;
        }

        if (!(sender instanceof Player)) {
            sender.sendMessage("Only players can use /pv <number>.");
            return true;
        }

        Player player = (Player) sender;
        if (args.length != 1) {
            player.sendMessage(ChatColor.RED + "Usage: /pv <number> or /pv reload");
            return true;
        }

        int vaultNumber;
        try {
            vaultNumber = Integer.parseInt(args[0]);
        } catch (NumberFormatException e) {
            player.sendMessage(ChatColor.RED + "Invalid vault number.");
            return true;
        }

        int maxVaults = determineMaxVaults(player);
        if (vaultNumber < 1 || vaultNumber > maxVaults) {
            player.sendMessage(ChatColor.RED + "You donâ€™t have access to that vault.");
            return true;
        }

        openVault(player, vaultNumber);
        return true;
    }

    private int determineMaxVaults(Player player) {
        int base = getConfig().getInt("vault-limits.normal", 2);
        int max = base;

        if (player.hasPermission("mamtak.pv.advanced")) {
            max = Math.max(max, getConfig().getInt("vault-limits.advanced", 4));
        }
        if (player.hasPermission("mamtak.pv.rich")) {
            max = Math.max(max, getConfig().getInt("vault-limits.rich", 6));
        }
        if (player.hasPermission("mamtak.pv.moderator")) {
            max = Math.max(max, getConfig().getInt("vault-limits.moderator", 8));
        }
        if (player.hasPermission("mamtak.pv.admin")) {
            max = Math.max(max, getConfig().getInt("vault-limits.admin", 12));
        }
        if (player.hasPermission("mamtak.pv.owner")) {
            return Integer.MAX_VALUE;
        }
        return max;
    }

    private void openVault(Player player, int vaultNumber) {
        String title = ChatColor.GREEN + "Vault " + vaultNumber;
        Inventory inv = Bukkit.createInventory(null, 54, title);

        UUID uuid = player.getUniqueId();
        File vaultFile = new File(vaultsFolder, uuid + "_" + vaultNumber + ".yml");
        YamlConfiguration vaultConfig = YamlConfiguration.loadConfiguration(vaultFile);

        for (int i = 0; i < inv.getSize(); i++) {
            String path = "slot." + i;
            if (vaultConfig.contains(path)) {
                inv.setItem(i, vaultConfig.getItemStack(path));
            }
        }

        openVaultOwners.put(inv, uuid);
        openVaultNumbers.put(inv, vaultNumber);
        player.openInventory(inv);
    }

    @EventHandler
    public void onInventoryClose(InventoryCloseEvent event) {
        Inventory inv = event.getInventory();
        if (openVaultOwners.containsKey(inv)) {
            saveVault(inv);
            openVaultOwners.remove(inv);
            openVaultNumbers.remove(inv);
        }
    }

    private void saveVault(Inventory inv) {
        UUID uuid = openVaultOwners.get(inv);
        int vaultNumber = openVaultNumbers.get(inv);
        File vaultFile = new File(vaultsFolder, uuid + "_" + vaultNumber + ".yml");
        YamlConfiguration vaultConfig = new YamlConfiguration();

        for (int i = 0; i < inv.getSize(); i++) {
            ItemStack item = inv.getItem(i);
            if (item != null) {
                vaultConfig.set("slot." + i, item);
            }
        }

        try {
            vaultConfig.save(vaultFile);
        } catch (IOException e) {
            getLogger().severe("Could not save vault " + uuid + "_" + vaultNumber);
            e.printStackTrace();
        }
    }
}
